function zigzag(input_wp_filename,density_m,angle_degrees,outfilename,lonfirst)
addpath('utm2lonlat');
[startlat,startlon,startaltitude,...
    endlat,endlon] = importtwocoords(input_wp_filename);

[startx,starty,utmzone] = deg2utm(startlat,startlon);
[endx,endy,~] = deg2utm(endlat,endlon);
%[densityx,densityy,~] = deg2utm(densitylat,densitylon);

%Latitude is parallel to equator, eg. the y-coordinate.
%start1=[startlon,startlat]';
%end1=[endlon,endlat]';
%step1=[densitylon,densitylat]';
start1=[startx,starty]';
end1=[endx,endy]';
%step1=[densityx,densityy]';
steplength=density_m;
altitude=startaltitude;
%outfilename='zigzag1_angle.csv';
%start1=[10.32070046368862,55.47399682001517]';%,0
%end1=[10.32578636424596,55.47397658495616]';%,0
%step1=[10.3211088273502,55.47399689368879]';%0
%altitude=0;

%start1=[55.47399682001517;10.32070046368862];
%end1=[55.47397658495616;10.32578636424596];
%step1=[55.47399689368879;10.3211088273502];

angle1deg = angle_degrees/2;
angle1rad=angle1deg*pi/180;
cangle=cos(angle1rad);
sangle=sin(angle1rad);
rotcc=[cangle -sangle;sangle cangle];
rotc=rotcc';

relvec1=end1-start1;
%relstep1=step1-start1;

veclength=norm(relvec1);
%steplength=norm(relstep1);
bigsteplength=steplength/cangle;
tot2steplength=floor(veclength/steplength);

flatvec=veclength*[1;0];
%flatstep=steplength*[1;0];

cangledif=dot(relvec1,flatvec)/(norm(relvec1)*norm(flatvec));
sangledif=sqrt(abs(cangledif^2-1));
rotdiff=[cangledif -sangledif;sangledif cangledif];

ccflatvec=rotcc*flatvec;
cflatvec=rotc*flatvec;

ccflatstep=bigsteplength/norm(ccflatvec)*ccflatvec;
cflatstep=bigsteplength/norm(cflatvec)*cflatvec;

relwp(1,:)=[0,0];
i=2;
while(i<=tot2steplength)
    if(mod(i,4)==2)
        relwp(i,:)=(i-1)*cflatstep;
        relwp(i+1,:)=(i-1)*ccflatstep;
    else
        relwp(i+1,:)=(i-1)*cflatstep;
        relwp(i,:)=(i-1)*ccflatstep;
    end
    i=i+2;
end

for i=1:length(relwp) %rotate back to original frame
    relwp2(i,:)=(rotdiff*(relwp(i,:)'))';
end
for i=1:length(relwp2) %move to correct position
    relwp3(i,:)=start1+relwp2(i,:)';
end


utmz1=utmzone;
for i=1:length(relwp3)
    utmz(i,:)=utmz1;
end
%utmz=utmz';
[lat lon]=utm2deg(relwp3(:,1)',relwp3(:,2)',utmz);
relwp4=[lat lon];
%for i=1:length(relwp3)
%    relwp4(i,:)=utm2deg(relwp3(i,1),relwp3(i,2),utmzone)';
%end

formatstr='%3.16g,%3.16g,%3.16g';
fid_out = fopen(outfilename,'w');
for i=1:length(relwp4)-1
    if lonfirst
        fprintf(fid_out,formatstr,relwp4(i,1),relwp4(i,2),altitude);
    else
        fprintf(fid_out,formatstr,relwp4(i,2),relwp4(i,1),altitude);
    end
    fprintf(fid_out,'\n');
end
if lonfirst
    fprintf(fid_out,formatstr,relwp4(end,1),relwp4(end,2),altitude);
else
    fprintf(fid_out,formatstr,relwp4(end,2),relwp4(end,1),altitude);
end
fprintf(fid_out,'\n');
if lonfirst
    fprintf(fid_out,formatstr,endlat,endlon,altitude);
else
    fprintf(fid_out,formatstr,endlon,endlat,altitude);
end
fclose(fid_out);











    function [...
            startlat,startlon,startaltitude,...
            endlat,endlon] = importtwocoords(filename, startRow, endRow)
        %IMPORTFILE Import numeric data from a text file as column vectors.
        %   [LATITUDES,LONGITUDES,ALTITUDES] = IMPORTFILE(FILENAME) Reads data from
        %   text file FILENAME for the default selection.
        %
        %   [LATITUDES,LONGITUDES,ALTITUDES] = IMPORTFILE(FILENAME, STARTROW,
        %   ENDROW) Reads data from rows STARTROW through ENDROW of text file
        %   FILENAME.
        %
        % Example:
        %   [latitudes,longitudes,altitudes] = importfile('zigzag1.txt',2, 4);
        %
        %    See also TEXTSCAN.
        
        % Auto-generated by MATLAB on 2015/05/25 14:37:30
        
        %% Initialize variables.
        delimiter = '\t';
        if nargin<=2
            startRow = 2;
            endRow = inf;
        end
        
        %% Format string for each line of text:
        %   column9: double (%f)
        %	column10: double (%f)
        %   column11: double (%f)
        % For more information, see the TEXTSCAN documentation.
        formatSpec = '%*s%*s%*s%*s%*s%*s%*s%*s%f%f%f%*s%[^\n\r]';
        
        %% Open the text file.
        fileID = fopen(filename,'r');
        
        %% Read columns of data according to format string.
        % This call is based on the structure of the file used to generate this
        % code. If an error occurs for a different file, try regenerating the code
        % from the Import Tool.
        dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
        for block=2:length(startRow)
            frewind(fileID);
            dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
            for col=1:length(dataArray)
                dataArray{col} = [dataArray{col};dataArrayBlock{col}];
            end
        end
        
        %% Close the text file.
        fclose(fileID);
        
        %% Post processing for unimportable data.
        % No unimportable data rules were applied during the import, so no post
        % processing code is included. To generate code which works for
        % unimportable data, select unimportable cells in a file and regenerate the
        % script.
        
        %% Allocate imported array to column variable names
        latitudes = dataArray{:, 1};
        longitudes = dataArray{:, 2};
        altitudes = dataArray{:, 3};
        
        startlat=latitudes(1);
        startlon=longitudes(1);
        endlat=latitudes(2);
        endlon=longitudes(2);
        %densitylat=latitudes(3);
        %densitylon=longitudes(3);
        startaltitude=altitudes(1);
    end

end